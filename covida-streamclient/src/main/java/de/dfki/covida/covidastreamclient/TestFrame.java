/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.dfki.covida.covidastreamclient;

import de.dfki.covida.covidacore.utils.ImageUtils;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import javax.swing.JFrame;
import org.apache.log4j.Logger;

/**
 *
 * @author Tobias
 */
public class TestFrame extends JFrame implements IStreamingClient {

    /**
     * Logger
     */
    private static final Logger log = Logger.getLogger(TestFrame.class);
    int w = 1152;
    int h  = 864;
//    int w = 1280;
//    int h = 720;
    private final boolean FULLSCREEN = false;
    private BufferedImage frame;
    private final Dimension size;

    /**
     * Creates new form TestFrame
     */
    public TestFrame() {
        initComponents();
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice device;
        device = ge.getDefaultScreenDevice();
        Toolkit tk = Toolkit.getDefaultToolkit();
        int xSize = ((int) tk.getScreenSize().getWidth());
        int ySize = ((int) tk.getScreenSize().getHeight());
        size = new Dimension(xSize, ySize);

        if (FULLSCREEN && device.isFullScreenSupported()) {
            device.setFullScreenWindow(this);
        } else {
            setExtendedState(getExtendedState() | JFrame.MAXIMIZED_BOTH);
//            setUndecorated(true);
        }
        setSize(size);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        setLayout(null);
        RemoteStreamingApplication app = RemoteStreamingApplication.getInstance();
        app.addListener(this);
        app.connect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TestFrame().setVisible(true);
            }
        });
    }

    @Override
    public void paint(Graphics g) {

        g.drawImage(frame, 0, 0, this);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void onNewFrame(byte[] bytes) {
        BufferedImage img = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        log.debug("New Frame :" + bytes.length);
        for (int x = 0; x < w; x++) {
            for (int y = 0; y < h; y++) {
                int index = 4 * ((h - y - 1) * w + x);
                int r = ((int) (bytes[index + 0]));
                int g = ((int) (bytes[index + 1]));
                int b = ((int) (bytes[index + 2]));
                int a = ((int) (bytes[index + 3]));
                int argb = ((a & 0xFF) << 24) //a
                        | ((r & 0xFF) << 16) //r
                        | ((g & 0xFF) << 8) //g
                        | ((b & 0xFF));      //b

                img.setRGB(x, y, argb);
            }
        }
        frame = ImageUtils.deepCopy(img);
        img.flush();
        repaint();
        frame.flush();
    }
}